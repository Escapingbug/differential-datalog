import java.io.IOException;
import java.util.*;
import java.lang.RuntimeException;

import ddlogapi.DDlogAPI;
import ddlogapi.DDlogCommand;
//import ddlogapi.DDlogRecord;

/* FlatBuffer library */
//import com.google.flatbuffers.FlatBufferBuilder;

/* FlatBuffer bindings generated by `flatc` */
import ddlog.redist.*;

public class Test {
    private final DDlogAPI api;

    Test() {
        this.api = new DDlogAPI(1, null, false);
    }

    void onCommit(DDlogCommand command) {
        System.out.println(command.toString());
    }

    void run() {

        // Create a `FlatBufferBuilder`, which will be used to store DDlog
        // commands to pass to `apply_updates()`.
        redistBuilder builder = new redistBuilder();

        builder.insert_DdlogBinding((short)100, 10000);
        builder.insert_DdlogDependency(10000, 20000);

        /*int command2 = __Command.create__Command(
                builder,
                __CommandKind.Insert,
                __RelId.HostAddresses,
                __Value.HostAddresses,
                HostAddresses.createHostAddresses(
                    builder,
                    12345, 
                    HostAddresses.createAddrsVector(
                        builder,
                        new int[]{ builder.createString("10.10.10.101"),
                                   builder.createString("10.10.10.102") })));

        builder.finish(command2);

        java.nio.ByteBuffer buf = builder.dataBuffer();
        System.out.println("Buffer size after adding two commands: " + buf.remaining());
        */
        /*Span_string.Binding binding = new Span_string.Binding("1", "2");
        DDlogCommand command0 = binding.createCommand(true);
        Span_string.FWRule rule = new Span_string.FWRule("1");
        DDlogCommand command1 = rule.createCommand(true);
        DDlogCommand[] commands = { command0, command1 };*/

        this.api.start();
        //this.api.applyUpdates(commands);
        this.api.commit_dump_changes(r -> this.onCommit(r));
        this.api.stop();
    }

    public static void main(String[] args) throws IOException {
        Test test = new Test();
        test.run();
    }
}
